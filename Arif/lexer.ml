# 1 "lexer.mll"
 

  open Lexing
  open Parser
  open Ast
  open Error

  let current_pos b =
    lexeme_start_p b,
    lexeme_end_p b

  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [
	"print_int",     PRINT_INT;
	"print_newline", PRINT_NEWLINE;
	"let",           LET;
	"in",            IN;
	"true",          CONST_BOOL(true);
	"false",         CONST_BOOL(false);
	"not",           NOT;
	"if",            IF;
	"then",          THEN;
	"else",          ELSE;
      ];
    fun s ->
      try Hashtbl.find h s with Not_found -> IDENT s
	
  let comment_cpt = ref 0


# 35 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\231\255\232\255\001\000\001\000\002\000\003\000\004\000\
    \005\000\084\000\243\255\244\255\245\255\246\255\008\000\249\255\
    \020\000\037\000\002\000\255\255\251\255\253\255\247\255\240\255\
    \239\255\237\255\235\255\234\255\233\255\004\000\252\255\253\255\
    \017\000\038\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\023\000\023\000\019\000\017\000\023\000\
    \014\000\013\000\255\255\255\255\255\255\255\255\007\000\255\255\
    \003\000\005\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \002\000\002\000\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
    \255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\019\000\018\000\000\000\018\000\000\000\018\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\007\000\018\000\000\000\000\000\000\000\004\000\027\000\
    \017\000\015\000\011\000\012\000\033\000\013\000\032\000\010\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\035\000\014\000\005\000\008\000\006\000\026\000\
    \025\000\024\000\023\000\022\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\020\000\021\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\003\000\028\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\000\000\
    \000\000\000\000\000\000\009\000\000\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\018\000\255\255\000\000\255\255\018\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\018\000\255\255\255\255\255\255\000\000\004\000\
    \000\000\000\000\000\000\000\000\029\000\000\000\029\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\000\000\000\000\000\000\005\000\
    \006\000\007\000\008\000\014\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\017\000\017\000\
    \033\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\009\000\000\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\255\255\
    \255\255\255\255\255\255\009\000\255\255\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\029\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 41 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 164 "lexer.ml"

  | 1 ->
# 43 "lexer.mll"
      ( token lexbuf )
# 169 "lexer.ml"

  | 2 ->
# 45 "lexer.mll"
      ( incr comment_cpt; comment lexbuf; token lexbuf )
# 174 "lexer.ml"

  | 3 ->
# 47 "lexer.mll"
      ( CONST_INT (int_of_string (lexeme lexbuf)) )
# 179 "lexer.ml"

  | 4 ->
# 49 "lexer.mll"
      ( CONST_UNIT )
# 184 "lexer.ml"

  | 5 ->
# 51 "lexer.mll"
      ( LPAREN )
# 189 "lexer.ml"

  | 6 ->
# 53 "lexer.mll"
      ( RPAREN )
# 194 "lexer.ml"

  | 7 ->
# 55 "lexer.mll"
      ( SEMI )
# 199 "lexer.ml"

  | 8 ->
# 57 "lexer.mll"
      ( EOI )
# 204 "lexer.ml"

  | 9 ->
# 59 "lexer.mll"
      ( MINUS )
# 209 "lexer.ml"

  | 10 ->
# 61 "lexer.mll"
      ( PLUS )
# 214 "lexer.ml"

  | 11 ->
# 63 "lexer.mll"
      ( STAR )
# 219 "lexer.ml"

  | 12 ->
# 65 "lexer.mll"
      ( SLASH )
# 224 "lexer.ml"

  | 13 ->
# 67 "lexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 229 "lexer.ml"

  | 14 ->
# 69 "lexer.mll"
      ( EQUAL )
# 234 "lexer.ml"

  | 15 ->
# 71 "lexer.mll"
      ( DOUBLE_EQUAL )
# 239 "lexer.ml"

  | 16 ->
# 73 "lexer.mll"
      ( NEQ )
# 244 "lexer.ml"

  | 17 ->
# 75 "lexer.mll"
      ( COMP Bgt )
# 249 "lexer.ml"

  | 18 ->
# 77 "lexer.mll"
      ( COMP Bge )
# 254 "lexer.ml"

  | 19 ->
# 79 "lexer.mll"
      ( COMP Blt )
# 259 "lexer.ml"

  | 20 ->
# 81 "lexer.mll"
      ( COMP Ble )
# 264 "lexer.ml"

  | 21 ->
# 83 "lexer.mll"
      ( AND )
# 269 "lexer.ml"

  | 22 ->
# 85 "lexer.mll"
      ( OR )
# 274 "lexer.ml"

  | 23 ->
# 87 "lexer.mll"
      ( error (Lexical_error (lexeme lexbuf)) (current_pos lexbuf) )
# 279 "lexer.ml"

  | 24 ->
# 89 "lexer.mll"
      ( EOF )
# 284 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 29
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 93 "lexer.mll"
      ( incr comment_cpt; comment lexbuf )
# 296 "lexer.ml"

  | 1 ->
# 95 "lexer.mll"
      ( decr comment_cpt; if !comment_cpt > 0 then comment lexbuf )
# 301 "lexer.ml"

  | 2 ->
# 97 "lexer.mll"
      ( comment lexbuf )
# 306 "lexer.ml"

  | 3 ->
# 99 "lexer.mll"
      ( error (Lexical_error "unterminated comment") (current_pos lexbuf) )
# 311 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

